(defun count-flips (position color)
	;there are eight possible directions
	;dotimes loop that runs eight times with each loop checking a different direction
	(let ((count 1)
		  (depth 0)
		  (pos position)
		 )
		 
		(dotimes (i 8)
			(cond
				;check north
				((equal i 0)
					(setf pos (- pos 10))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (- pos 10))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check northeast
				((equal i 1)
					(setf pos (- pos 9))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (- pos 9))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check east
				((equal i 2)
					(setf pos (1+ pos))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (1+ pos))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;chcek southeast
				((equal i 3)
					(setf pos (+ pos 11))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (+ pos 11))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check south
				((equal i 4)
					(setf pos (+ pos 10))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (+ pos 10))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check southwest
				((equal i 5)
					(setf pos (+ pos 9))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (+ pos 9))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check west
				((equal i 6)
					(setf pos (1- pos))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (1- pos))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
				
				;check northwest
				((equal i 7)
					(setf pos (- pos 11))
					(when (and (not (string= (nth pos *board*) "-")) (not (string= (nth pos *board*) color)) (not (string= (nth pos *board*) "-1")))
						(incf count)
						(incf depth)
						(setf pos (- pos 11))
					)
					(if (string= (nth pos *board*) "-") (setf count (- count depth)))
					(setf depth 0)
					(setf pos position)
				)
			)
		)
		;return count here
		(return-from count-flips count)
	)
)